use std::sync::RwLockWriteGuard;
use std::iter::FromIterator;
use std::str::FromStr;

use ast;
use symbol::{Symbol, Interner, SymbolMap};
use error::error;

grammar(interner: &mut RwLockWriteGuard<Interner>);

extern {
    type Error = (usize, String);
}

pub(crate) File: ast::File = {
    <stmts:(<Stmt> ";")*> => ast::File { <> },
};

Stmt: ast::Stmt = {
    Bind => ast::Stmt::Bind(<>),
    Expr => ast::Stmt::Expr(<>),
    IfStmt => ast::Stmt::If(<>),
};

IfStmt: ast::stmt::If = {
    "if" <cond:Expr> "then" <cons:Expr> => ast::stmt::If { <> }
}

Bind: ast::Bind = {
    "let" <name:Symbol> <ty:(":" <Ty>)?> "=" <val:Expr> => ast::Bind { <> },
};

Ty: ast::Ty = {
    Box<FnTy> => ast::Ty::Fn(<>),
    Ty1,
}

Ty1: ast::Ty = {
    Tuple<Ty> => ast::Ty::Tuple(<>),
    Map<Ty> => ast::Ty::Struct(<>),
    "i32" => ast::Ty::I32,
    "unit" => ast::Ty::Unit,
    "never" => ast::Ty::Never,
}

FnTy: ast::ty::Fn = {
    <domain:Ty1> "->" <range:Ty> => ast::ty::Fn { <> },
}

Expr: ast::Expr = {
    Box<IfExpr> => ast::Expr::If(<>),
    Expr1,
}

Expr1: ast::Expr = {
    Box<AppExpr> => ast::Expr::App(<>),
    Expr2,
}

Expr2: ast::Expr = {
    Box<ProjExpr> => ast::Expr::Proj(<>),
    LitExpr => ast::Expr::Lit(<>),
    Scope<Stmt, Box<Expr>> => ast::Expr::Scope(<>),
}

IfExpr: ast::expr::If = {
    "if" <cond:Expr> "then" <cons:Expr> "else" <alt:Expr> => ast::expr::If { <> }
}

ProjExpr: ast::expr::Proj = {
    <expr:Expr2> "." <label:Symbol> => ast::expr::Proj { <> }
}

AppExpr: ast::expr::App = {
    <fun:Expr2> <param:Expr> => ast::expr::App { <> }
}

LitExpr: ast::expr::Lit = {
    Symbol => ast::expr::Lit::Var(<>),
    <l:@L> <i:Int> =>? i32::from_str(i)
        .map(ast::expr::Lit::Int)
        .map_err(|err| error(l, err)),
    Map<Expr> => ast::expr::Lit::Struct(<>),
}

Scope<B, T>: ast::Scope<B, T> = {
    "(" <body:(<B> ";")*> <tail:T?> ")" => ast::Scope { <> },
};

Tuple<T>: ast::Tuple<T> = {
    "[" <init:(<T> ",")*> <tail:T?> "]" => {
        let mut val = init;
        val.extend(tail);
        ast::Tuple(val)
    }
}

Map<T>: ast::Map<T> = {
    "{" <init:(<Symbol> ":" <T> ",")*> <tail:(<Symbol> ":" <T>)?> "}" => {
        ast::Map(SymbolMap::from_iter(init.into_iter().chain(tail)))
    }
}

Box<T>: Box<T> = T => Box::new(<>);

pub(crate) Symbol: Symbol = {
    OkSymbol => interner.intern(<>),
    <@L> BadSymbol =>? Err(error(<>, "symbol may not contain consecutive or trailing '_' characters")),
};

match { 
    // Keywords
    "sys",
    "read",
    "write",
    "comp",
    "type",
    "never",
    "unit",
    "i32",
    "struct",
    "enum",
    "let",
    "if",
    "then",
    "else",
    // Punctuation
    ";", 
    ",",
    "=",
    ":",
    ".",
    "(",
    ")",
    "{",
    "}",
    "[",
    "]",
    "->",
} else { 
    // Valid symbol
    r"_?[[:alpha:]](?:_?[[:alnum:]])*" => OkSymbol,
} else {
    // Invalid symbol
    r"[_[:alpha:]][_[:word:]]*" => BadSymbol,
} else {
    // Integer literal
    r"[+-]?[[:digit:]]+" => Int,
}